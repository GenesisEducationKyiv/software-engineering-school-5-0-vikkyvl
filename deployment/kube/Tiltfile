# –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ EKS –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
kube_context = "arn:aws:eks:us-east-1:301235908824:cluster/ragdoll-eks"
allow_k8s_contexts(kube_context)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
if os.getenv("ENV") != "production":
    fail("Tiltfile –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ –≤ ENV=production ‚Äî –≤—ñ–¥–º–æ–≤–∞!")
if os.getenv("ALLOW_PROD") != "true":
    fail("–î–æ–¥–∞–π ALLOW_PROD=true –¥–ª—è –∑–∞–ø—É—Å–∫—É Tilt —É –ø—Ä–æ–¥–∞–∫—à–Ω—ñ.")

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
render_dir = "rendered"

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
local("mkdir -p %s" % render_dir)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—ñ–≤
apps = {
    "stateful": {
        "values": "charts/stateful/values-prod.yaml",
        "chart": "charts/stateful",
        "watch": [
            "charts/stateful/Chart.yaml",
            "charts/stateful/templates/statefulset.yaml"
        ],
        "application_yaml": None
    },
    "platform": {
        "values": "charts/platform/values-prod.yaml",
        "chart": "charts/platform",
        "watch": [
            "charts/platform/Chart.yaml",
            "charts/platform/templates/deployment.yaml"
        ],
        "application_yaml": "application/platform-application.yaml",
    },
    "platform-web": {
        "values": "charts/platform/platform-web/values-prod.yaml",
        "chart": "charts/platform/platform-web",
        "watch": [
            "charts/platform/platform-web/Chart.yaml",
            "charts/platform/platform-web/templates/deployment.yaml"
        ],
        "application_yaml": "application/platform-web-application.yaml",
    }
}

def deploy_helm_chart(name, chart, values, watch_files):
    """–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Helm —á–∞—Ä—Ç—É —á–µ—Ä–µ–∑ template —Ç–∞ k8s_yaml"""
    output_file = "%s/%s.yaml" % (render_dir, name)

    # –°—Ç–≤–æ—Ä—é—î–º–æ local_resource –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É Helm —Ç–µ–º–ø–ª–µ–π—Ç–∞
    local_resource(
        name + "-helm-render",
        cmd="helm template %s %s -f %s --kube-context %s > %s" % (
            name, chart, values, kube_context, output_file
        ),
        deps=[values] + watch_files,
        ignore=['**/%s/**' % render_dir]
    )

    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ YAML
    k8s_yaml(output_file)

def trigger_argocd_sync(app_name):
    """–¢—Ä–∏–≥–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó ArgoCD –¥–æ–¥–∞—Ç–∫—É"""
    print("üöÄ ArgoCD sync triggered for %s" % app_name)
    local("argocd app sync %s --grpc-web" % app_name)
    local("argocd app wait %s --health --timeout 300" % app_name)

# –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—ñ–≤
for name, cfg in apps.items():
    chart = cfg["chart"]
    values = cfg["values"]
    watch_files = cfg["watch"]
    app_yaml = cfg["application_yaml"]
    
    if app_yaml:
        # –î–ª—è ArgoCD –¥–æ–¥–∞—Ç–∫—ñ–≤
        k8s_yaml(app_yaml)
        
        # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–º—ñ–Ω–∏ –≤ ArgoCD Application YAML
        def create_sync_handler(app_name):
            def sync_handler():
                trigger_argocd_sync(app_name)
            return sync_handler
        
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∏–≥–µ—Ä –Ω–∞ –∑–º—ñ–Ω–∏ –≤ application YAML
        local_resource(
            name + "-argocd-sync",
            cmd="echo 'ArgoCD sync for %s'" % name,
            deps=[app_yaml],
            trigger_mode=TRIGGER_MODE_MANUAL
        )
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        local_resource(
            name + "-manual-sync",
            cmd="argocd app sync %s --grpc-web && argocd app wait %s --health --timeout 300" % (name, name),
            trigger_mode=TRIGGER_MODE_MANUAL,
            auto_init=False
        )
        
    else:
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö Helm —á–∞—Ä—Ç—ñ–≤
        deploy_helm_chart(name, chart, values, watch_files)

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
local_resource(
    "argocd-status",
    cmd="argocd app list --grpc-web",
    trigger_mode=TRIGGER_MODE_MANUAL,
    auto_init=False
)